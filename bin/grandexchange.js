#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const agent_1 = require("../lib/agent");
const server_1 = require("../lib/server");
const pipeline_1 = require("../lib/pipeline");
const external_1 = require("../lib/external");
const account = process.env.CDK_DEPLOY_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT;
const region = process.env.CDK_DEPLOY_REGION || process.env.CDK_DEFAULT_REGION;
const app = new cdk.App();
const artifactBucket = `aws-codepipeline-${account}-${region}`;
const vpcId = app.node.tryGetContext('vpcId') || 'dud';
const githubTokenParameter = app.node.tryGetContext('githubTokenParameter') || 'dud';
const repository = app.node.tryGetContext('repository') || 'influx-rsge';
const externalResources = new external_1.ExternalResources(app, 'ExternalResources', {
    env: {
        account: account,
        region: region
    },
    artifactBucket: artifactBucket,
    vpcId: vpcId
});
new agent_1.AgentStack(app, 'InfluxAgentStack', {
    env: {
        account: account,
        region: region
    },
    tags: {
        Owner: 'antoine',
        Project: 'GrandExchange'
    }
});
new server_1.ServerStack(app, 'ServerStack', {
    env: {
        account: account,
        region: region
    },
    tags: {
        Owner: 'antoine',
        Project: 'GrandExchange'
    },
    artifactBucket: externalResources.artifactBucket,
    keyName: 'avanderm',
    vpc: externalResources.vpc
});
new pipeline_1.PipelineStack(app, 'GrandExchangeDeploymentStack', {
    env: {
        account: account,
        region: region
    },
    tags: {
        Owner: 'antoine',
        Project: 'GrandExchange'
    },
    artifactBucket: externalResources.artifactBucket,
    githubTokenParameter: githubTokenParameter,
    repository: repository
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhbmRleGNoYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyYW5kZXhjaGFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQXFDO0FBQ3JDLHdDQUEwQztBQUMxQywwQ0FBNEM7QUFDNUMsOENBQWdEO0FBQ2hELDhDQUFvRDtBQUVwRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDbEYsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0FBRS9FLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sY0FBYyxHQUFHLG9CQUFvQixPQUFPLElBQUksTUFBTSxFQUFFLENBQUM7QUFDL0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDO0FBRXZELE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsSUFBSSxLQUFLLENBQUM7QUFDckYsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksYUFBYSxDQUFDO0FBRXpFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSw0QkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7SUFDdEUsR0FBRyxFQUFFO1FBQ0QsT0FBTyxFQUFFLE9BQU87UUFDaEIsTUFBTSxFQUFFLE1BQU07S0FDakI7SUFDRCxjQUFjLEVBQUUsY0FBYztJQUM5QixLQUFLLEVBQUUsS0FBSztDQUNmLENBQUMsQ0FBQztBQUVILElBQUksa0JBQVUsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUU7SUFDcEMsR0FBRyxFQUFFO1FBQ0QsT0FBTyxFQUFFLE9BQU87UUFDaEIsTUFBTSxFQUFFLE1BQU07S0FDakI7SUFDRCxJQUFJLEVBQUU7UUFDRixLQUFLLEVBQUUsU0FBUztRQUNoQixPQUFPLEVBQUUsZUFBZTtLQUMzQjtDQUNKLENBQUMsQ0FBQztBQUVILElBQUksb0JBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFO0lBQ2hDLEdBQUcsRUFBRTtRQUNELE9BQU8sRUFBRSxPQUFPO1FBQ2hCLE1BQU0sRUFBRSxNQUFNO0tBQ2pCO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsS0FBSyxFQUFFLFNBQVM7UUFDaEIsT0FBTyxFQUFFLGVBQWU7S0FDM0I7SUFDRCxjQUFjLEVBQUUsaUJBQWlCLENBQUMsY0FBYztJQUNoRCxPQUFPLEVBQUUsVUFBVTtJQUNuQixHQUFHLEVBQUUsaUJBQWlCLENBQUMsR0FBRztDQUM3QixDQUFDLENBQUM7QUFFSCxJQUFJLHdCQUFhLENBQUMsR0FBRyxFQUFFLDhCQUE4QixFQUFFO0lBQ25ELEdBQUcsRUFBRTtRQUNELE9BQU8sRUFBRSxPQUFPO1FBQ2hCLE1BQU0sRUFBRSxNQUFNO0tBQ2pCO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsS0FBSyxFQUFFLFNBQVM7UUFDaEIsT0FBTyxFQUFFLGVBQWU7S0FDM0I7SUFDRCxjQUFjLEVBQUUsaUJBQWlCLENBQUMsY0FBYztJQUNoRCxvQkFBb0IsRUFBRSxvQkFBb0I7SUFDMUMsVUFBVSxFQUFFLFVBQVU7Q0FDekIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQWdlbnRTdGFjayB9IGZyb20gJy4uL2xpYi9hZ2VudCc7XG5pbXBvcnQgeyBTZXJ2ZXJTdGFjayB9IGZyb20gJy4uL2xpYi9zZXJ2ZXInO1xuaW1wb3J0IHsgUGlwZWxpbmVTdGFjayB9IGZyb20gJy4uL2xpYi9waXBlbGluZSc7XG5pbXBvcnQgeyBFeHRlcm5hbFJlc291cmNlcyB9IGZyb20gJy4uL2xpYi9leHRlcm5hbCc7XG5cbmNvbnN0IGFjY291bnQgPSBwcm9jZXNzLmVudi5DREtfREVQTE9ZX0FDQ09VTlQgfHwgcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVDtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LkNES19ERVBMT1lfUkVHSU9OIHx8IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTjtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgYXJ0aWZhY3RCdWNrZXQgPSBgYXdzLWNvZGVwaXBlbGluZS0ke2FjY291bnR9LSR7cmVnaW9ufWA7XG5jb25zdCB2cGNJZCA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3ZwY0lkJykgfHwgJ2R1ZCc7XG5cbmNvbnN0IGdpdGh1YlRva2VuUGFyYW1ldGVyID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZ2l0aHViVG9rZW5QYXJhbWV0ZXInKSB8fCAnZHVkJztcbmNvbnN0IHJlcG9zaXRvcnkgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdyZXBvc2l0b3J5JykgfHwgJ2luZmx1eC1yc2dlJztcblxuY29uc3QgZXh0ZXJuYWxSZXNvdXJjZXMgPSBuZXcgRXh0ZXJuYWxSZXNvdXJjZXMoYXBwLCAnRXh0ZXJuYWxSZXNvdXJjZXMnLCB7XG4gICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6IGFjY291bnQsXG4gICAgICAgIHJlZ2lvbjogcmVnaW9uXG4gICAgfSxcbiAgICBhcnRpZmFjdEJ1Y2tldDogYXJ0aWZhY3RCdWNrZXQsXG4gICAgdnBjSWQ6IHZwY0lkXG59KTtcblxubmV3IEFnZW50U3RhY2soYXBwLCAnSW5mbHV4QWdlbnRTdGFjaycsIHtcbiAgICBlbnY6IHtcbiAgICAgICAgYWNjb3VudDogYWNjb3VudCxcbiAgICAgICAgcmVnaW9uOiByZWdpb25cbiAgICB9LFxuICAgIHRhZ3M6IHtcbiAgICAgICAgT3duZXI6ICdhbnRvaW5lJyxcbiAgICAgICAgUHJvamVjdDogJ0dyYW5kRXhjaGFuZ2UnXG4gICAgfVxufSk7XG5cbm5ldyBTZXJ2ZXJTdGFjayhhcHAsICdTZXJ2ZXJTdGFjaycsIHtcbiAgICBlbnY6IHtcbiAgICAgICAgYWNjb3VudDogYWNjb3VudCxcbiAgICAgICAgcmVnaW9uOiByZWdpb25cbiAgICB9LFxuICAgIHRhZ3M6IHtcbiAgICAgICAgT3duZXI6ICdhbnRvaW5lJyxcbiAgICAgICAgUHJvamVjdDogJ0dyYW5kRXhjaGFuZ2UnXG4gICAgfSxcbiAgICBhcnRpZmFjdEJ1Y2tldDogZXh0ZXJuYWxSZXNvdXJjZXMuYXJ0aWZhY3RCdWNrZXQsXG4gICAga2V5TmFtZTogJ2F2YW5kZXJtJyxcbiAgICB2cGM6IGV4dGVybmFsUmVzb3VyY2VzLnZwY1xufSk7XG5cbm5ldyBQaXBlbGluZVN0YWNrKGFwcCwgJ0dyYW5kRXhjaGFuZ2VEZXBsb3ltZW50U3RhY2snLCB7XG4gICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6IGFjY291bnQsXG4gICAgICAgIHJlZ2lvbjogcmVnaW9uXG4gICAgfSxcbiAgICB0YWdzOiB7XG4gICAgICAgIE93bmVyOiAnYW50b2luZScsXG4gICAgICAgIFByb2plY3Q6ICdHcmFuZEV4Y2hhbmdlJ1xuICAgIH0sXG4gICAgYXJ0aWZhY3RCdWNrZXQ6IGV4dGVybmFsUmVzb3VyY2VzLmFydGlmYWN0QnVja2V0LFxuICAgIGdpdGh1YlRva2VuUGFyYW1ldGVyOiBnaXRodWJUb2tlblBhcmFtZXRlcixcbiAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5XG59KTtcbiJdfQ==