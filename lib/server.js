"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const cfn = require("@aws-cdk/aws-cloudformation");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
class ServerStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stackId = cdk.Stack.of(this).stackId;
        const region = cdk.Stack.of(this).region;
        const backupBucket = new s3.Bucket(this, 'BackupStorage', {
            lifecycleRules: [
                {
                    enabled: true,
                    expiration: cdk.Duration.days(7)
                }
            ]
        });
        this.backupBucket = backupBucket;
        const instanceRole = new iam.Role(this, 'InstanceRole', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')
        });
        const instanceRolePolicy = new iam.Policy(this, 'InstanceRolePolicy', {
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        "s3:Get*"
                    ],
                    resources: [
                        "*"
                    ]
                })
            ]
        });
        instanceRolePolicy.attachToRole(instanceRole);
        const volume = ec2.BlockDeviceVolume.ebs(20, {
            deleteOnTermination: false,
            volumeType: ec2.EbsDeviceVolumeType.STANDARD
        });
        const securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {
            vpc: props.vpc
        });
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8086), 'InfluxDB access');
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8888), 'Chronograf access');
        const waitConditionHandle = new cfn.CfnWaitConditionHandle(this, 'CodeDeployInstallHandle');
        const waitCondition = new cfn.CfnWaitCondition(this, 'CodeDeployInstall', {
            handle: waitConditionHandle.ref
        });
        const userData = ec2.UserData.forLinux();
        userData.addS3DownloadCommand({
            bucket: props.artifactBucket,
            bucketKey: 'setup.sh'
        });
        userData.addExecuteFileCommand({
            filePath: 'setup.sh',
            arguments: `${stackId} ${region} ${waitConditionHandle}`
        });
        const instance = new ec2.Instance(this, 'Server', {
            blockDevices: [
                {
                    deviceName: '/dev/sdf',
                    volume: volume
                }
            ],
            instanceType: new ec2.InstanceType('t3a.small'),
            machineImage: ec2.MachineImage.latestAmazonLinux(),
            keyName: props.keyName,
            role: instanceRole,
            securityGroup: securityGroup,
            userData: userData,
            vpc: props.vpc
        });
        const cfnInstance = instance.node.defaultChild;
        cfnInstance.cfnOptions.metadata = {};
    }
}
exports.ServerStack = ServerStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLG1EQUFtRDtBQUNuRCx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQVF0QyxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsS0FBSztJQUd0QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCO1FBQ2pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUMzQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFekMsTUFBTSxZQUFZLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDdEQsY0FBYyxFQUFFO2dCQUNaO29CQUNJLE9BQU8sRUFBRSxJQUFJO29CQUNiLFVBQVUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ25DO2FBQ0o7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUVqQyxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNwRCxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7U0FDM0QsQ0FBQyxDQUFDO1FBRUgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFO1lBQ2xFLFVBQVUsRUFBRTtnQkFDUixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7b0JBQ3BCLE9BQU8sRUFBRTt3QkFDTCxTQUFTO3FCQUNaO29CQUNELFNBQVMsRUFBRTt3QkFDUCxHQUFHO3FCQUNOO2lCQUNKLENBQUM7YUFDTDtTQUNKLENBQUMsQ0FBQztRQUVILGtCQUFrQixDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUN6QyxtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLFVBQVUsRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsUUFBUTtTQUMvQyxDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUMvRCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7U0FDakIsQ0FBQyxDQUFDO1FBRUgsYUFBYSxDQUFDLGNBQWMsQ0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDekYsYUFBYSxDQUFDLGNBQWMsQ0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFFM0YsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUU1RixNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDdEUsTUFBTSxFQUFFLG1CQUFtQixDQUFDLEdBQUc7U0FDbEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6QyxRQUFRLENBQUMsb0JBQW9CLENBQUM7WUFDMUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQzVCLFNBQVMsRUFBRSxVQUFVO1NBQ3hCLENBQUMsQ0FBQTtRQUNGLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUMzQixRQUFRLEVBQUUsVUFBVTtZQUNwQixTQUFTLEVBQUUsR0FBRyxPQUFPLElBQUksTUFBTSxJQUFJLG1CQUFtQixFQUFFO1NBQzNELENBQUMsQ0FBQTtRQUVGLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzlDLFlBQVksRUFBRTtnQkFDVjtvQkFDSSxVQUFVLEVBQUUsVUFBVTtvQkFDdEIsTUFBTSxFQUFFLE1BQU07aUJBQ2pCO2FBQ0o7WUFDRCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUMvQyxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtZQUNsRCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsYUFBYSxFQUFFLGFBQWE7WUFDNUIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBK0IsQ0FBQztRQUVsRSxXQUFXLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxFQUVqQyxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBekZELGtDQXlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGNmbiBmcm9tICdAYXdzLWNkay9hd3MtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcblxuaW50ZXJmYWNlIFNlcnZlclN0YWNrUHJvcHMgZXh0ZW5kcyBjZGsuU3RhY2tQcm9wcyB7XG4gICAgYXJ0aWZhY3RCdWNrZXQ6IHMzLklCdWNrZXQ7XG4gICAga2V5TmFtZTogc3RyaW5nO1xuICAgIHZwYzogZWMyLklWcGM7XG59XG5cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgcHVibGljIHJlYWRvbmx5IGJhY2t1cEJ1Y2tldDogczMuQnVja2V0O1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2ZXJTdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IHN0YWNrSWQgPSBjZGsuU3RhY2sub2YodGhpcykuc3RhY2tJZDtcbiAgICAgICAgY29uc3QgcmVnaW9uID0gY2RrLlN0YWNrLm9mKHRoaXMpLnJlZ2lvbjtcblxuICAgICAgICBjb25zdCBiYWNrdXBCdWNrZXQgPSBuZXcgczMuQnVja2V0KHRoaXMsICdCYWNrdXBTdG9yYWdlJywge1xuICAgICAgICAgICAgbGlmZWN5Y2xlUnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGNkay5EdXJhdGlvbi5kYXlzKDcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJhY2t1cEJ1Y2tldCA9IGJhY2t1cEJ1Y2tldDtcblxuICAgICAgICBjb25zdCBpbnN0YW5jZVJvbGUgPSBuZXcgaWFtLlJvbGUodGhpcywgJ0luc3RhbmNlUm9sZScsIHtcbiAgICAgICAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdlYzIuYW1hem9uYXdzLmNvbScpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGluc3RhbmNlUm9sZVBvbGljeSA9IG5ldyBpYW0uUG9saWN5KHRoaXMsICdJbnN0YW5jZVJvbGVQb2xpY3knLCB7XG4gICAgICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcInMzOkdldCpcIlxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKlwiXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICBpbnN0YW5jZVJvbGVQb2xpY3kuYXR0YWNoVG9Sb2xlKGluc3RhbmNlUm9sZSk7XG5cbiAgICAgICAgY29uc3Qgdm9sdW1lID0gZWMyLkJsb2NrRGV2aWNlVm9sdW1lLmVicygyMCwge1xuICAgICAgICAgICAgZGVsZXRlT25UZXJtaW5hdGlvbjogZmFsc2UsXG4gICAgICAgICAgICB2b2x1bWVUeXBlOiBlYzIuRWJzRGV2aWNlVm9sdW1lVHlwZS5TVEFOREFSRFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdTZWN1cml0eUdyb3VwJywge1xuICAgICAgICAgICAgdnBjOiBwcm9wcy52cGNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZSggZWMyLlBlZXIuYW55SXB2NCgpLCBlYzIuUG9ydC50Y3AoODA4NiksICdJbmZsdXhEQiBhY2Nlc3MnKTtcbiAgICAgICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZSggZWMyLlBlZXIuYW55SXB2NCgpLCBlYzIuUG9ydC50Y3AoODg4OCksICdDaHJvbm9ncmFmIGFjY2VzcycpO1xuXG4gICAgICAgIGNvbnN0IHdhaXRDb25kaXRpb25IYW5kbGUgPSBuZXcgY2ZuLkNmbldhaXRDb25kaXRpb25IYW5kbGUodGhpcywgJ0NvZGVEZXBsb3lJbnN0YWxsSGFuZGxlJyk7XG5cbiAgICAgICAgY29uc3Qgd2FpdENvbmRpdGlvbiA9IG5ldyBjZm4uQ2ZuV2FpdENvbmRpdGlvbih0aGlzLCAnQ29kZURlcGxveUluc3RhbGwnLCB7XG4gICAgICAgICAgICBoYW5kbGU6IHdhaXRDb25kaXRpb25IYW5kbGUucmVmXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0gZWMyLlVzZXJEYXRhLmZvckxpbnV4KCk7XG4gICAgICAgIHVzZXJEYXRhLmFkZFMzRG93bmxvYWRDb21tYW5kKHtcbiAgICAgICAgICAgIGJ1Y2tldDogcHJvcHMuYXJ0aWZhY3RCdWNrZXQsXG4gICAgICAgICAgICBidWNrZXRLZXk6ICdzZXR1cC5zaCdcbiAgICAgICAgfSlcbiAgICAgICAgdXNlckRhdGEuYWRkRXhlY3V0ZUZpbGVDb21tYW5kKHtcbiAgICAgICAgICAgIGZpbGVQYXRoOiAnc2V0dXAuc2gnLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBgJHtzdGFja0lkfSAke3JlZ2lvbn0gJHt3YWl0Q29uZGl0aW9uSGFuZGxlfWBcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBlYzIuSW5zdGFuY2UodGhpcywgJ1NlcnZlcicsIHtcbiAgICAgICAgICAgIGJsb2NrRGV2aWNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlTmFtZTogJy9kZXYvc2RmJyxcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiB2b2x1bWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDNhLnNtYWxsJyksXG4gICAgICAgICAgICBtYWNoaW5lSW1hZ2U6IGVjMi5NYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgICAgICAgIGtleU5hbWU6IHByb3BzLmtleU5hbWUsXG4gICAgICAgICAgICByb2xlOiBpbnN0YW5jZVJvbGUsXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwOiBzZWN1cml0eUdyb3VwLFxuICAgICAgICAgICAgdXNlckRhdGE6IHVzZXJEYXRhLFxuICAgICAgICAgICAgdnBjOiBwcm9wcy52cGNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2ZuSW5zdGFuY2UgPSBpbnN0YW5jZS5ub2RlLmRlZmF1bHRDaGlsZCBhcyBlYzIuQ2ZuSW5zdGFuY2U7XG5cbiAgICAgICAgY2ZuSW5zdGFuY2UuY2ZuT3B0aW9ucy5tZXRhZGF0YSA9IHtcblxuICAgICAgICB9O1xuICAgIH1cbn0iXX0=